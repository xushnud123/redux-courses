==> Loading ni yaratish uchun oldin uni o'rnatadigan (Reducer) ga ega bo'lishimiz kerak
biz uni shunday nomlaymiz (bugsRequested)

    bugs.js
1️⃣ bugsRequested:(bugs,action) => {
    bugs.loading = true;
}

2️⃣ bugsRequestFaild:(bugs,action) ={
    bugs.loading = false;
}

Biz serverdan malumotlarni olgandan keyin uni (false) ga o'rnatamiz yani 

bugsReceived: (bugs,action) => {
    bugs.list = action.payload;
    bugs.loading = false;
}


Va uni o'rta dasturimizda (middleware) ga jo'natish uchun Action ga kiritamiz

const url = '/bugs'
export const loadBugs = () => apiCallBegan({
    url,
    onStart: bugsRequeste.type,
    onSuccess: bugsReceived.type,
    onError: bugsRequestFaild.type
})

==> (Middleware) 
(onStart) ni action.payload dan olib dispatch orqali uzatamiz.
     🔄if (onStart) dispatch({ type: onStart })

const api = ({ dispatch }) => next => async action => {
    if (action.type !== actions.apiCallBegan.type) return next(action);

    
    const { url, method, onError, onStart, onSuccess, data } = action.payload
    
    //loading yuborilgan bo'lsa ishlaydi bugs/bugsRequested
    if (onStart) dispatch({ type: onStart })

    next(action);

    try {
        const response = await axios.request({
            baseURL: 'http://localhost:9001/api',
            url,
            data,
            method
        })
        // General
        dispatch(actions.apiCallSuccess(response.data))
        // Specific
        if (onSuccess) dispatch({ type: onSuccess, payload: response.data })
    }
    catch (error) {
        // General
        dispatch(actions.apiCallFaild(error.message))
        // Specific
        if (onError) dispatch({ type: onError, payload: error.message })

    }

}